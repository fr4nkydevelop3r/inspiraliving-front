{"version":3,"sources":["webpack://gatsby-starter-default/./src/templates/reflections.js"],"names":["data","pageContext","strapiPage","metadata","contentSections","localizations","global","strapiGlobal","regex","numberOfPage","pageNext","pagePrevious","locale","nextPagePath","match","previousPagePath","colors","name","text","background","border","categories","allStrapiCategory","edges","node","unshift","slug","posts","allStrapiArticle","useState","categorySelected","map","category","i","color","getCategoryColor","find","handleNavigation","navigate","seo","className","onClick","key","length","article","strapiId","Link","to","G","image","getImage","localFile","alt","title","description","humanPageNumber","Math","round","numberOfPages"],"mappings":"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","file":"component---src-templates-reflections-js-3401d63914a898cd6bfe.js","sourcesContent":["import React, { useState } from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"@/components/layout\"\nimport { Link, navigate } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nimport SEO from \"@/components/seo\"\n\nconst Reflections = ({ data, pageContext }) => {\n  const { contentSections, metadata, localizations } = data.strapiPage\n  const global = data.strapiGlobal\n  const regex = /\\d+/gm\n  let numberOfPage = 0\n\n  let pageNext = \"\"\n  let pagePrevious = \"\"\n\n  if (pageContext.locale === \"en\") {\n    pageNext = \"/reflections\"\n\n    if (pageContext.nextPagePath !== \"\") {\n      numberOfPage = pageContext.nextPagePath.match(regex)\n\n      if (numberOfPage) {\n        pageNext = `/reflections/${numberOfPage[0]}`\n      }\n    }\n    if (pageContext.previousPagePath !== \"\") {\n      numberOfPage = pageContext.previousPagePath.match(regex)\n      if (numberOfPage) {\n        pagePrevious = `/reflections/${numberOfPage[0]}`\n      } else {\n        pagePrevious = `/reflections`\n      }\n    }\n  }\n\n  if (pageContext.locale === \"es\") {\n    pageNext = \"/es/reflections\"\n\n    if (pageContext.nextPagePath !== \"\") {\n      numberOfPage = pageContext.nextPagePath.match(regex)\n\n      if (numberOfPage) {\n        pageNext = `/es/reflections/${numberOfPage[0]}`\n      }\n    }\n    if (pageContext.previousPagePath !== \"\") {\n      numberOfPage = pageContext.previousPagePath.match(regex)\n      if (numberOfPage) {\n        pagePrevious = `/es/reflections/${numberOfPage[0]}`\n      } else {\n        pagePrevious = `/es/reflections`\n      }\n    }\n  }\n\n  const colors = [\n    {\n      name: \"blue\",\n      text: \"text-blue-600\",\n      background: \"bg-gradient-to-r from-blue-300 to-blue-600\",\n      border: \"border-blue-500\",\n    },\n    {\n      name: \"pink\",\n      text: \"text-pink-500\",\n      background: \"bg-gradient-to-r from-red-600  to-pink-600\",\n      border: \"border-pink-500\",\n    },\n\n    {\n      name: \"purple\",\n      text: \"text-purple-500\",\n      background: \"bg-gradient-to-r from-purple-400 to-purple-700\",\n      border: \"border-purple-500\",\n    },\n    {\n      name: \"green\",\n      text: \"text-green-500\",\n      background: \"bg-gradient-to-r from-green-400 to-green-900\",\n      border: \"border-green-500\",\n    },\n    {\n      name: \"yellow\",\n      text: \"text-yellow-500\",\n      background: \"bg-gradient-to-r from-yellow-400 to-yellow-900\",\n      border: \"border-yellow-500\",\n    },\n    {\n      name: \"red\",\n      text: \"text-red-500\",\n      background: \"bg-gradient-to-r from-red-300 to-red-900\",\n      border: \"border-red-500\",\n    },\n    {\n      name: \"gray\",\n      text: \"text-gray-500\",\n      background: \"bg-gradient-to-r from-gray-300 to-gray-600\",\n      border: \"border-gray-500\",\n    },\n    {\n      name: \"pink\",\n      text: \"text-pink-500\",\n      background: \"bg-gradient-to-r from-red-600  to-pink-600\",\n      border: \"border-pink-500\",\n    },\n    {\n      name: \"blue\",\n      text: \"text-blue-600\",\n      background: \"bg-gradient-to-r from-blue-300 to-blue-600\",\n      border: \"border-blue-500\",\n    },\n    {\n      name: \"purple\",\n      text: \"text-purple-500\",\n      background: \"bg-gradient-to-r from-purple-400 to-purple-700\",\n      border: \"border-purple-500\",\n    },\n    {\n      name: \"green\",\n      text: \"text-green-500\",\n      background: \"bg-gradient-to-r from-green-400 to-green-900\",\n      border: \"border-green-500\",\n    },\n    {\n      name: \"yellow\",\n      text: \"text-yellow-500\",\n      background: \"bg-gradient-to-r from-yellow-400 to-yellow-900\",\n      border: \"border-yellow-500\",\n    },\n    {\n      name: \"red\",\n      text: \"text-red-500\",\n      background: \"bg-gradient-to-r from-red-300 to-red-900\",\n      border: \"border-red-500\",\n    },\n    {\n      name: \"gray\",\n      text: \"text-gray-500\",\n      background: \"bg-gradient-to-r from-gray-300 to-gray-600\",\n      border: \"border-gray-500\",\n    },\n  ]\n\n  let { edges: categories } = data.allStrapiCategory\n  if (categories[0].node.name !== \"all\") {\n    categories.unshift({ node: { name: \"all\", slug: \"reflections\" } })\n  }\n\n  const { edges: posts } = data.allStrapiArticle\n\n  const [categorySelected, setCategorySelected] = useState(\"all\")\n\n  categories = categories.map((category, i) => {\n    return {\n      name: category.node.name,\n      color: {\n        ...colors[i],\n      },\n      slug: category.node.slug,\n    }\n  })\n\n  const getCategoryColor = category => {\n    const result = categories.find(({ name }) => name === category)\n    return result.color\n  }\n\n  const handleNavigation = slug => {\n    if (slug === \"reflections\") {\n      pageContext.locale === \"en\"\n        ? navigate(`/reflections`)\n        : navigate(`/es/reflections`)\n      return\n    }\n    pageContext.locale === \"en\" ? navigate(`/${slug}`) : navigate(`/es/${slug}`)\n  }\n\n  return (\n    <>\n      <SEO seo={metadata} global={global} />\n      <Layout global={global} pageContext={{ ...pageContext, localizations }}>\n        <div className=\"bg-black w-screen px-4 md:px-0\">\n          <div className=\"mx-0 sm:mx-6 \">\n            <div className=\"bg-black container w-full text-xl md:text-2xl text-gray-800 leading-normal rounded-t\">\n              <header className=\"pt-12 mb-16\">\n                <ul className=\"flex flex-wrap\">\n                  {categories.map((category, i) => (\n                    <li\n                      className={`${category.color.text} mr-3 cursor-pointer ${\n                        categorySelected === category.name ? \"underline\" : \"\"\n                      } `}\n                      onClick={() => handleNavigation(category.slug)}\n                      key={category.slug}\n                    >\n                      #{category.name}\n                    </li>\n                  ))}\n                </ul>\n              </header>\n\n              {posts.length > 0 ? (\n                <div className=\"masonry sm:masonry-sm md:masonry-md\">\n                  {posts.map(article => (\n                    <div\n                      className={`bg-gray-900 mb-8 border ${\n                        getCategoryColor(article.node.category.name).border\n                      } rounded-lg shadow-md break-inside cursor-pointer`}\n                      onClick={() => handleNavigation(article.node.slug)}\n                      key={article.node.strapiId}\n                    >\n                      <Link\n                        to={\n                          pageContext.locale === \"en\"\n                            ? `/${article.node.slug}`\n                            : `/es/${article.node.slug}`\n                        }\n                      >\n                        <GatsbyImage\n                          image={getImage(article.node.image[0].localFile)}\n                          alt={article.node.title}\n                          className=\"rounded-lg\"\n                        />\n                      </Link>\n                      <div className=\"p-5\">\n                        <Link\n                          to={\n                            pageContext.locale === \"en\"\n                              ? `/${article.node.slug}`\n                              : `/es/${article.node.slug}`\n                          }\n                        >\n                          <h5\n                            className={`mb-2 text-2xl font-bold tracking-tight text-gray-900 ${\n                              getCategoryColor(article.node.category.name).text\n                            }`}\n                          >\n                            {article.node.title}\n                          </h5>\n                        </Link>\n                        <p className=\"mb-3 text-gray-400\">\n                          {article.node.description}\n                        </p>\n                        <div></div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p>No hay articulos</p>\n              )}\n            </div>\n          </div>\n        </div>\n        {categorySelected === \"all\" && (\n          <div className=\"bg-black w-screen flex justify-around pt-16\">\n            {/* previousPageLink and nextPageLink were added by the plugin */}\n            {pageContext.humanPageNumber !== 1 && (\n              <Link to={pagePrevious} className=\"text-primary-600\">\n                Previous\n              </Link>\n            )}\n            {pageContext.humanPageNumber <\n              Math.round(pageContext.numberOfPages / 2) && (\n              <Link to={pageNext} className=\"text-primary-600\">\n                Next\n              </Link>\n            )}\n          </div>\n        )}\n      </Layout>\n    </>\n  )\n}\n\nexport default Reflections\n\nexport const query = graphql`\n  fragment GlobalData on StrapiGlobal {\n    favicon {\n      localFile {\n        publicURL\n      }\n    }\n    footer {\n      ctatext\n      description\n      rights\n      logo {\n        alternativeText\n        localFile {\n          childImageSharp {\n            gatsbyImageData(placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\n          }\n        }\n      }\n      id\n      button {\n        id\n        text\n        type\n      }\n    }\n    id\n    metaTitleSuffix\n    metadata {\n      metaDescription\n      metaTitle\n      shareImage {\n        localFile {\n          publicURL\n        }\n      }\n    }\n    navbar {\n      button {\n        id\n        newTab\n        text\n        type\n        url\n      }\n      id\n      links {\n        url\n        text\n        newTab\n        id\n      }\n      logo {\n        localFile {\n          childImageSharp {\n            gatsbyImageData(placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\n          }\n        }\n      }\n    }\n  }\n\n  query ReflectionsQuery(\n    $id: String!\n    $locale: String!\n    $skip: Int!\n    $limit: Int!\n  ) {\n    strapiGlobal(locale: { eq: $locale }) {\n      ...GlobalData\n    }\n    strapiPage(id: { eq: $id }) {\n      slug\n      shortName\n      metadata {\n        metaTitle\n        metaDescription\n        shareImage {\n          localFile {\n            publicURL\n          }\n        }\n      }\n      localizations {\n        id\n        locale\n      }\n      contentSections\n    }\n\n    allStrapiArticle(\n      sort: { fields: published_at, order: DESC }\n      filter: { locale: { eq: $locale } }\n      skip: $skip\n      limit: $limit\n    ) {\n      edges {\n        node {\n          strapiId\n          slug\n          title\n          category {\n            name\n          }\n          localizations {\n            id\n            locale\n          }\n          content\n          description\n          published_at(fromNow: true)\n          writer {\n            name\n          }\n          image {\n            localFile {\n              childImageSharp {\n                gatsbyImageData(\n                  placeholder: BLURRED\n                  formats: [AUTO, WEBP, AVIF]\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n\n    allStrapiCategory(filter: { locale: { eq: $locale } }) {\n      edges {\n        node {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}