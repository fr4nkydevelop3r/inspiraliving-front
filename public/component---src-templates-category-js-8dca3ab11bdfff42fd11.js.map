{"version":3,"sources":["webpack://gatsby-starter-default/./src/templates/category.js"],"names":["data","pageContext","strapiCategory","metadata","contentSections","localizations","global","strapiGlobal","colors","name","text","background","border","categories","allStrapiCategory","edges","node","unshift","slug","useState","categorySelected","map","category","i","color","getCategoryColor","find","handleNavigation","locale","navigate","articles","seo","className","onClick","key","length","article","Link","to","G","image","getImage","localFile","alt","title","description"],"mappings":"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","file":"component---src-templates-category-js-8dca3ab11bdfff42fd11.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"@/components/layout\"\nimport { Link, navigate } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nimport SEO from \"@/components/seo\"\n\nconst Category = ({ data, pageContext }) => {\n  const { contentSections, metadata, localizations } = data.strapiCategory\n  const global = data.strapiGlobal\n\n  const colors = [\n    {\n      name: \"blue\",\n      text: \"text-blue-600\",\n      background: \"bg-gradient-to-r from-blue-300 to-blue-600\",\n      border: \"border-blue-500\",\n    },\n    {\n      name: \"pink\",\n      text: \"text-pink-500\",\n      background: \"bg-gradient-to-r from-red-600  to-pink-600\",\n      border: \"border-pink-500\",\n    },\n\n    {\n      name: \"purple\",\n      text: \"text-purple-500\",\n      background: \"bg-gradient-to-r from-purple-400 to-purple-700\",\n      border: \"border-purple-500\",\n    },\n    {\n      name: \"green\",\n      text: \"text-green-500\",\n      background: \"bg-gradient-to-r from-green-400 to-green-900\",\n      border: \"border-green-500\",\n    },\n    {\n      name: \"yellow\",\n      text: \"text-yellow-500\",\n      background: \"bg-gradient-to-r from-yellow-400 to-yellow-900\",\n      border: \"border-yellow-500\",\n    },\n    {\n      name: \"red\",\n      text: \"text-red-500\",\n      background: \"bg-gradient-to-r from-red-300 to-red-900\",\n      border: \"border-red-500\",\n    },\n    {\n      name: \"gray\",\n      text: \"text-gray-500\",\n      background: \"bg-gradient-to-r from-gray-300 to-gray-600\",\n      border: \"border-gray-500\",\n    },\n    {\n      name: \"pink\",\n      text: \"text-pink-500\",\n      background: \"bg-gradient-to-r from-red-600  to-pink-600\",\n      border: \"border-pink-500\",\n    },\n    {\n      name: \"blue\",\n      text: \"text-blue-600\",\n      background: \"bg-gradient-to-r from-blue-300 to-blue-600\",\n      border: \"border-blue-500\",\n    },\n    {\n      name: \"purple\",\n      text: \"text-purple-500\",\n      background: \"bg-gradient-to-r from-purple-400 to-purple-700\",\n      border: \"border-purple-500\",\n    },\n    {\n      name: \"green\",\n      text: \"text-green-500\",\n      background: \"bg-gradient-to-r from-green-400 to-green-900\",\n      border: \"border-green-500\",\n    },\n    {\n      name: \"yellow\",\n      text: \"text-yellow-500\",\n      background: \"bg-gradient-to-r from-yellow-400 to-yellow-900\",\n      border: \"border-yellow-500\",\n    },\n    {\n      name: \"red\",\n      text: \"text-red-500\",\n      background: \"bg-gradient-to-r from-red-300 to-red-900\",\n      border: \"border-red-500\",\n    },\n    {\n      name: \"gray\",\n      text: \"text-gray-500\",\n      background: \"bg-gradient-to-r from-gray-300 to-gray-600\",\n      border: \"border-gray-500\",\n    },\n  ]\n\n  let { edges: categories } = data.allStrapiCategory\n  if (categories[0].node.name !== \"all\") {\n    categories.unshift({ node: { name: \"all\", slug: \"reflections\" } })\n  }\n\n  const [categorySelected, setCategorySelected] = useState(\n    data.strapiCategory.name\n  )\n\n  categories = categories.map((category, i) => {\n    return {\n      name: category.node.name,\n      color: {\n        ...colors[i],\n      },\n      slug: category.node.slug,\n    }\n  })\n\n  const getCategoryColor = category => {\n    const result = categories.find(({ name }) => name === category)\n    return result.color\n  }\n\n  const handleNavigation = slug => {\n    if (slug === \"reflections\" || slug === \"reflexiones\") {\n      pageContext.locale === \"en\"\n        ? navigate(`/reflections`)\n        : navigate(`/es/reflections`)\n      return\n    }\n    pageContext.locale === \"en\" ? navigate(`/${slug}`) : navigate(`/es/${slug}`)\n  }\n\n  const articles = data.strapiCategory.articles\n\n  return (\n    <>\n      <SEO seo={metadata} global={global} />\n      <Layout global={global} pageContext={{ ...pageContext, localizations }}>\n        <div className=\"bg-black w-screen px-4 md:px-0\">\n          <div className=\"mx-0 sm:mx-6 \">\n            <div className=\"bg-black container w-full text-xl md:text-2xl text-gray-800 leading-normal rounded-t\">\n              <header className=\"pt-12 mb-16\">\n                <ul className=\"flex flex-wrap\">\n                  {categories.map((category, i) => (\n                    <li\n                      className={`${category.color.text} mr-3 cursor-pointer ${\n                        categorySelected === category.name ? \"underline\" : \"\"\n                      } `}\n                      onClick={() => handleNavigation(category.slug)}\n                      key={category.slug}\n                    >\n                      #{category.name}\n                    </li>\n                  ))}\n                </ul>\n              </header>\n              {articles.length > 0 ? (\n                <div className=\"masonry sm:masonry-sm md:masonry-md\">\n                  {articles.map(article => (\n                    <div\n                      className={`bg-gray-900 mb-8 border ${\n                        getCategoryColor(data.strapiCategory.name).border\n                      } rounded-lg shadow-md break-inside cursor-pointer`}\n                      onClick={() => handleNavigation(article.slug)}\n                      key={article.slug}\n                    >\n                      <Link\n                        to={\n                          pageContext.locale === \"en\"\n                            ? `/${article.slug}`\n                            : `/es/${article.slug}`\n                        }\n                      >\n                        <GatsbyImage\n                          image={getImage(article.image[0].localFile)}\n                          alt={article.title}\n                          className=\"rounded-lg\"\n                        />\n                      </Link>\n                      <div className=\"p-5\">\n                        <Link\n                          to={\n                            pageContext.locale === \"en\"\n                              ? `/${article.slug}`\n                              : `/es/${article.slug}`\n                          }\n                        >\n                          <h5\n                            className={`mb-2 text-2xl font-bold tracking-tight text-gray-900 ${\n                              getCategoryColor(data.strapiCategory.name).text\n                            }`}\n                          >\n                            {article.title}\n                          </h5>\n                        </Link>\n                        <p className=\"mb-3 text-gray-400\">\n                          {article.description}\n                        </p>\n                        <div></div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p>No hay articulos</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </Layout>\n    </>\n  )\n}\n\nexport default Category\n\nexport const query = graphql`\n  fragment GlobalData on StrapiGlobal {\n    favicon {\n      localFile {\n        publicURL\n      }\n    }\n    footer {\n      ctatext\n      description\n      rights\n      logo {\n        alternativeText\n        localFile {\n          childImageSharp {\n            gatsbyImageData(placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\n          }\n        }\n      }\n      id\n      button {\n        id\n        text\n        type\n      }\n    }\n    id\n    metaTitleSuffix\n    metadata {\n      metaDescription\n      metaTitle\n      shareImage {\n        localFile {\n          publicURL\n        }\n      }\n    }\n    navbar {\n      button {\n        id\n        newTab\n        text\n        type\n        url\n      }\n      id\n      links {\n        url\n        text\n        newTab\n        id\n      }\n      logo {\n        localFile {\n          childImageSharp {\n            gatsbyImageData(placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\n          }\n        }\n      }\n    }\n  }\n\n  query CategoryQuery($locale: String!, $slug: String!) {\n    strapiGlobal(locale: { eq: $locale }) {\n      ...GlobalData\n    }\n\n    strapiCategory(locale: { eq: $locale }, slug: { eq: $slug }) {\n      locale\n      name\n      localizations {\n        id\n        locale\n      }\n      slug\n      id\n      articles {\n        category\n        description\n        content\n        locale\n        slug\n        title\n        writer\n        image {\n          localFile {\n            childImageSharp {\n              gatsbyImageData\n            }\n          }\n        }\n      }\n    }\n\n    allStrapiCategory(filter: { locale: { eq: $locale } }) {\n      edges {\n        node {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}